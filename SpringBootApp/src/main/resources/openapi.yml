openapi: 3.0.1
info:
  title: OpenAPI definition
  version: v0
servers:
  - url: 'http://localhost:8080'
paths:
  '/weather-types/{id}':
    get:
      tags:
        - weather-type-controller
      operationId: getWeatherTypeById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/WeatherType'
    put:
      tags:
        - weather-type-controller
      operationId: updateWeatherType
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WeatherType'
        required: true
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/WeatherType'
  '/city/{id}':
    get:
      tags:
        - city-controller
      operationId: getCityById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/City'
    put:
      tags:
        - city-controller
      operationId: updateCity
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/City'
        required: true
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/City'
    delete:
      tags:
        - city-controller
      operationId: deleteCity
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
  '/city-weather/{id}':
    get:
      tags:
        - city-weather-controller
      operationId: getCityWeatherById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/CityWeather'
    put:
      tags:
        - city-weather-controller
      operationId: updateCityWeather
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CityWeather'
        required: true
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/CityWeather'
    delete:
      tags:
        - city-weather-controller
      operationId: deleteCityWeather
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
  '/api/weather/{regionName}':
    get:
      tags:
        - weather-controller
      operationId: getTemperatureByRegionNameAndDate
      parameters:
        - name: regionName
          in: path
          required: true
          schema:
            type: string
        - name: dateTime
          in: query
          required: true
          schema:
            type: string
            format: date-time
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                type: number
                format: double
    put:
      tags:
        - weather-controller
      operationId: updateRegionTemperature
      parameters:
        - name: regionName
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateRegionTemperatureDto'
        required: true
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/WeatherDto'
    post:
      tags:
        - weather-controller
      operationId: addNewRegion
      parameters:
        - name: regionName
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WeatherRequestDto'
        required: true
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/WeatherDto'
    delete:
      tags:
        - weather-controller
      operationId: deleteRegion
      parameters:
        - name: regionName
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
  /weather-types:
    get:
      tags:
        - weather-type-controller
      operationId: getAllWeatherTypes
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/WeatherType'
    post:
      tags:
        - weather-type-controller
      operationId: createWeatherType
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WeatherType'
        required: true
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/WeatherType'
  /city:
    get:
      tags:
        - city-controller
      operationId: getAllCities
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/City'
    post:
      tags:
        - city-controller
      operationId: createCity
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/City'
        required: true
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/City'
  /city-weather:
    get:
      tags:
        - city-weather-controller
      operationId: getAllCities_1
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CityWeather'
    post:
      tags:
        - city-weather-controller
      operationId: createCityWeather
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CityWeather'
        required: true
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/CityWeather'
  /api/auth/registration:
    post:
      tags:
        - authentication-controller
      operationId: registration
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/UserDto'
  '/weather_api/current/{location}':
    get:
      tags:
        - weather-api-controller
      operationId: getCurrentWeather
      parameters:
        - name: location
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/WeatherApi'
components:
  schemas:
    WeatherType:
      type: object
      properties:
        id:
          type: integer
          format: int64
        type:
          type: string
    City:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
    CityWeather:
      type: object
      properties:
        id:
          type: integer
          format: int64
        city:
          $ref: '#/components/schemas/City'
        weatherType:
          $ref: '#/components/schemas/WeatherType'
        temperature:
          type: number
          format: double
        dateTime:
          type: string
          format: date-time
    UpdateRegionTemperatureDto:
      type: object
      properties:
        dateTime:
          type: string
          format: date-time
        temperature:
          type: number
          format: double
    WeatherDto:
      type: object
      properties:
        regionName:
          type: string
        temperature:
          type: number
          format: double
    WeatherRequestDto:
      type: object
      properties:
        temperature:
          type: number
          format: double
        dateTime:
          type: string
          format: date-time
    Role:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
        username:
          type: string
        password:
          type: string
        roles:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/Role'
    UserDto:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
    Condition:
      type: object
      properties:
        text:
          type: string
    Current:
      type: object
      properties:
        last_updated:
          type: string
          format: date-time
        temp_c:
          type: number
          format: double
        is_day:
          type: integer
          format: int32
        condition:
          $ref: '#/components/schemas/Condition'
        wind_kph:
          type: number
          format: double
        pressure_mb:
          type: number
          format: double
        precip_mm:
          type: number
          format: double
        humidity:
          type: integer
          format: int32
        cloud:
          type: integer
          format: int32
        feelslike_c:
          type: number
          format: double
        vis_km:
          type: number
          format: double
        gust_kph:
          type: number
          format: double
    Location:
      type: object
      properties:
        name:
          type: string
        region:
          type: string
        country:
          type: string
        localtime:
          type: string
          format: date-time
    WeatherApi:
      type: object
      properties:
        location:
          $ref: '#/components/schemas/Location'
        current:
          $ref: '#/components/schemas/Current'
